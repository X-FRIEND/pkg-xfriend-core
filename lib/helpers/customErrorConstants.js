"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const StatusCode = {
    OK: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    IMUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    URITooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HTTPVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511,
};
const ErrorType = Object.freeze({
    // HTTP Standard Errors
    BadRequest: 'BadRequest',
    Unauthorized: 'Unauthorized',
    PaymentRequired: 'PaymentRequired',
    Forbidden: 'Forbidden',
    NotFound: 'NotFound',
    MethodNotAllowed: 'MethodNotAllowed',
    NotAcceptable: 'NotAcceptable',
    ProxyAuthenticationRequired: 'ProxyAuthenticationRequired',
    RequestTimeout: 'RequestTimeout',
    Conflict: 'Conflict',
    Gone: 'Gone',
    LengthRequired: 'LengthRequired',
    PreconditionFailed: 'PreconditionFailed',
    PayloadTooLarge: 'PayloadTooLarge',
    URITooLong: 'URITooLong',
    UnsupportedMediaType: 'UnsupportedMediaType',
    RangeNotSatisfiable: 'RangeNotSatisfiable',
    ExpectationFailed: 'ExpectationFailed',
    MisdirectedRequest: 'MisdirectedRequest',
    UnprocessableEntity: 'UnprocessableEntity',
    Locked: 'Locked',
    FailedDependency: 'FailedDependency',
    TooEarly: 'TooEarly',
    UpgradeRequired: 'UpgradeRequired',
    PreconditionRequired: 'PreconditionRequired',
    TooManyRequests: 'TooManyRequests',
    RequestHeaderFieldsTooLarge: 'RequestHeaderFieldsTooLarge',
    UnavailableForLegalReasons: 'UnavailableForLegalReasons',
    InternalServerError: 'InternalServerError',
    NotImplemented: 'NotImplemented',
    BadGateway: 'BadGateway',
    ServiceUnavailable: 'ServiceUnavailable',
    GatewayTimeout: 'GatewayTimeout',
    HTTPVersionNotSupported: 'HTTPVersionNotSupported',
    VariantAlsoNegotiates: 'VariantAlsoNegotiates',
    InsufficientStorage: 'InsufficientStorage',
    LoopDetected: 'LoopDetected',
    NotExtended: 'NotExtended',
    NetworkAuthenticationRequired: 'NetworkAuthenticationRequired',
    // Other Errors
    GenericError: 'GenericError',
    ParseError: 'ParseError',
    ResourceEmpty: 'ResourceEmpty',
    ResourceUnavailable: 'ResourceUnavailable',
    TimeOut: 'TimeOut', // Acesso a Recurso resultou em time-out
});
const DefaultErrorType = new Map([
    [400, ErrorType.BadRequest],
    [401, ErrorType.Unauthorized],
    [402, ErrorType.PaymentRequired],
    [403, ErrorType.Forbidden],
    [404, ErrorType.NotFound],
    [405, ErrorType.MethodNotAllowed],
    [406, ErrorType.NotAcceptable],
    [407, ErrorType.ProxyAuthenticationRequired],
    [408, ErrorType.RequestTimeout],
    [409, ErrorType.Conflict],
    [410, ErrorType.Gone],
    [411, ErrorType.LengthRequired],
    [412, ErrorType.PreconditionFailed],
    [413, ErrorType.PayloadTooLarge],
    [414, ErrorType.URITooLong],
    [415, ErrorType.UnsupportedMediaType],
    [416, ErrorType.RangeNotSatisfiable],
    [417, ErrorType.ExpectationFailed],
    [421, ErrorType.MisdirectedRequest],
    [422, ErrorType.UnprocessableEntity],
    [423, ErrorType.Locked],
    [424, ErrorType.FailedDependency],
    [425, ErrorType.TooEarly],
    [426, ErrorType.UpgradeRequired],
    [428, ErrorType.PreconditionRequired],
    [429, ErrorType.TooManyRequests],
    [431, ErrorType.RequestHeaderFieldsTooLarge],
    [451, ErrorType.UnavailableForLegalReasons],
    // 500; ErrorType.InternalServerError, // Forçar default para GenericError
    [501, ErrorType.NotImplemented],
    // 502; ErrorType.BadGateway, // Forçar default para GenericError
    [503, ErrorType.ServiceUnavailable],
    [504, ErrorType.GatewayTimeout],
    [505, ErrorType.HTTPVersionNotSupported],
    [506, ErrorType.VariantAlsoNegotiates],
    [507, ErrorType.InsufficientStorage],
    [508, ErrorType.LoopDetected],
    [510, ErrorType.NotExtended],
    [511, ErrorType.NetworkAuthenticationRequired],
]);
const GenericErrorMessage = 'Generic Error';
exports.default = {
    StatusCode,
    ErrorType,
    GenericErrorMessage,
    DefaultErrorType,
};
